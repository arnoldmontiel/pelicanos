<?php

class WsAutoRipperController extends Controller
{

	public function actions()
	{
		return array(
		            'wsdl'=>array(
		                'class'=>'CWebServiceAction',
						'classMap'=>array(
					                    'NextStepResponse'=>'NextStepResponse',
						),
					
		),
		);
	}
	
	
	/**
	* Set current ripper state
	* @param integer id (auto_ripper Id)
	* @param integer idState
	* @param string description
	* @return bool success
	* @soap
	*/
	public function setState($id, $idState, $description)
	{
		$modelAutoRipper = AutoRipper::model()->findByPk($id);
		
		if(isset($modelAutoRipper))
		{
			try {
							
				$modelAutoRipper->Id_auto_ripper_state = $idState;
				$modelAutoRipper->save();
				
				$autoRipperState = AutoRipperAutoRipperState::model()->findByAttributes(array(
												'Id_auto_ripper'=>$id,
												'Id_auto_ripper_state'=>$idState));
				if(!isset($autoRipperState))
				{
					$autoRipperState = new AutoRipperAutoRipperState();
					$autoRipperState->Id_auto_ripper = $id;
					$autoRipperState->Id_auto_ripper_state = $idState;
				}
				$autoRipperState->description = $description;
				$autoRipperState->save();
				
				return true;
			} catch (Exception $e) {
				return false;
			}
		}
		return false;
	}
	
	/**
	* Create the Auto Ripper process and return the name
	* @return string name
	* @soap
	*/
	public function getProcessName()
	{
		$name = '';
		$model = new AutoRipperProcess();
		$model->Id = uniqid();
		if($model->save())
			$name = $model->Id;
			
		return $name;
	}
	
	/**
	* Get Next Step by idProcess
	* @param string idProcess
	* @return NextStepResponse response
	* @soap
	*/
	public function getNextStep($idProcess)
	{
		$nextStep = 0;
		$response = new NextStepResponse();
		$model = AutoRipperProcess::model()->findByPk($idProcess);
		
		if(isset($model))
		{
			$criteria = new CDbCriteria();
			$criteria->addCondition('t.Id_auto_ripper_state <> 11');
			$criteria->addCondition('t.Id_auto_ripper_process = "'.$idProcess.'"');
			$modelAutoRipper = AutoRipper::model()->find($criteria);
			
			if(isset($modelAutoRipper))
			{
				$response->file_name = $modelAutoRipper->name;
				$response->id_auto_ripper = $modelAutoRipper->Id;
				
				switch($modelAutoRipper->Id_auto_ripper_state)
				{				
					case '1':	//iniciado
						$nextStep = 2;//create 7zip
						break;
					case '2':	//creando 7zip
						$nextStep = 1;//init
						break;
					case '3':	//creado 7zip
						$nextStep = 3;//create RAR
						break;
					case '4':	//creando RAR
						$nextStep = 3;//create RAR
						break;
					case '5':	//creado RAR
						$nextStep = 4;//create PAR2
						break;
					case '6':	//creando PAR2
						$nextStep = 4;//create PAR2
						break;
					case '7':	//creado PAR2
						$nextStep = 5;//subir usenet
						break;
					case '8':	//subiendo usenet
						$nextStep = 5;//subir usenet
						break;
					case '9':	//subido usenet
						$nextStep = 6;//delete files
						break;											
					case '10':	//borrando archivos
						$nextStep = 6;//delete files
						break;
				}
			}
			else
			{
				$nextStep = 1; //init
			}
		}		
		
		$response->next_step = $nextStep;
		
		return $response;
	}
	
	/**
	* Start ripper process
	* @param string idDisc
	* @param string idProcess	
	* @return integer id (auto_ripper table autogenerated Id)
	* @soap
	*/
	public function ripperStart($idDisc, $idProcess)
	{
		
		$autoRipperId = 0;
		$modelAutoRipperProcess = AutoRipperProcess::model()->findByPk($idProcess);
		if(isset($modelAutoRipperProcess) && !empty($idDisc))
		{
			$modelAutoRipper = new AutoRipper();
			$modelAutoRipper->Id_disc = $idDisc;
			$modelAutoRipper->Id_auto_ripper_process = $idProcess;
			$modelAutoRipper->Id_auto_ripper_state = 1; //Iniciando
			$modelAutoRipper->name = uniqid();
			$modelAutoRipper->save();
			
			$autoRipperId = $modelAutoRipper->Id;
			
			$autoRipperState = new AutoRipperAutoRipperState();
			$autoRipperState->Id_auto_ripper = $autoRipperId;
			$autoRipperState->Id_auto_ripper_state = 1;			
			$autoRipperState->save();
			
		}
		
		return $autoRipperId;
	
	}
	
	/**
	* Set percentage
	* @param integer id
	* @param integer percentage
	* @return bool success
	* @soap
	*/
	public function setPercentage($id, $percentage)
	{
		$modelAutoRipper = AutoRipper::model()->findByPk($id);
		
		if(isset($modelAutoRipper))
		{
			try {

				$modelAutoRipper->percentage = $percentage;
				$modelAutoRipper->save();
				
				return true;
			} catch (Exception $e) {
				return false;
			}
		}
		return false;
	
	}
	
}
