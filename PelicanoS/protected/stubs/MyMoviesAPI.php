<?php
/**
* Soap client MyMoviesAPI
*
* Autogenerated with the Yii extension wsdl2php.
*/

class MyMovieBase
{
	public $UserName; //string;
	public $Password; //string;
	
	function __construct()
	{
		$this->UserName = "pablopedraza";
		$this->Password = "pablo";
	}	
}

class LoadDiscTitleById extends MyMovieBase
{
	public $Handshake; //string;
	public $Reference; //string;
	public $TitleId; //string;
	public $Client; //string;
	public $Version; //string;
	public $Locale; //int;
}

class LoadDiscTitleByIdResponse
{
	public $LoadDiscTitleByIdResult; //LoadDiscTitleByIdResult;
}

class LoadDiscTitleByIdResult
{
	public $any; //string;
}

class SearchDiscTitleByTitle extends MyMovieBase
{
	public $Handshake; //string;
	public $Reference; //string;
	public $Title; //string;
	public $Country; //string;
	public $Type; //string;
	public $Results; //int;
	public $Strict; //boolean;
	public $IncludeEnglish; //boolean;
	public $IncludeAdult; //boolean;
	public $Locale; //int;
}

class SearchDiscTitleByTitleResponse
{
	public $SearchDiscTitleByTitleResult; //SearchDiscTitleByTitleResult;
}

class SearchDiscTitleByTitleResult
{
	public $any; //string;
}
	
	
	/**
	* The soap client proxy class
	*/
class MyMoviesAPI 
{
	public $soapClient;
	
	private static $classmap = array(
	
	);
	
	function __construct($url='https://api.mymovies.dk/default.asmx?WSDL')
	{
		ini_set ('soap.wsdl_cache_enabled',0);
		$this->soapClient = new SoapClient($url,array("classmap"=>self::$classmap,"trace" => true,"exceptions" => false));
	}
	
	function LoadDiscTitleById($titleId, $saveImage=false)
	{
		$movieResponse = null;
		if(!empty($titleId))
		{
			$model = new LoadDiscTitleById();
			
			$model->TitleId = $titleId; //string;
			$model->Locale = 0;
				
			$LoadDiscTitleByIdResponse = $this->soapClient->LoadDiscTitleById($model);
				
			if(isset($LoadDiscTitleByIdResponse))
			{
				$movieResponse = $this->getMovieResponse(simplexml_load_string($LoadDiscTitleByIdResponse->LoadDiscTitleByIdResult->any), $saveImage);
			}
		}
		return $movieResponse;
	}
	
	private function getMovieResponse($data, $saveImage)
	{
		$modelMyMovieMovie = null;
		if(!empty($data) && (string)$data['status'] == 'ok')
		{
			if(!empty($data->Title))
			{
				$data = $data->Title;
				$modelMyMovieMovie = new MyMovieMovie();
				
				$modelMyMovieMovie->Id = (string)$data->ID;
				$modelMyMovieMovie->type = (string)$data->Type;
				$modelMyMovieMovie->bar_code = (string)$data->Barcode;
				$modelMyMovieMovie->country = (string)$data->Country;
				$modelMyMovieMovie->video_standard = (string)$data->VideoStandard;
				$modelMyMovieMovie->release_date = (string)$data->ReleaseDate;
				$modelMyMovieMovie->local_title = (string)$data->LocalTitle;
				$modelMyMovieMovie->original_title = (string)$data->OriginalTitle;
				$modelMyMovieMovie->sort_title = (string)$data->SortTitle;
				$modelMyMovieMovie->production_year = (string)$data->ProductionYear;
				$modelMyMovieMovie->running_time = (string)$data->RunningTime;
				$modelMyMovieMovie->description = (string)$data->Description;
				$modelMyMovieMovie->extra_features = (string)$data->ExtraFeatures;
				
				$modelMyMovieMovie->parental_rating_desc = (!empty($data->ParentalRating)?(string)$data->ParentalRating->Description:"");
				
				$modelMyMovieMovie->Id_parental_control = $this->getParentalControlId($data);
				
				$modelMyMovieMovie->adult = $this->getAdult($data);
				
				$modelMyMovieMovie->imdb = (string)$data->IMDB;
				$modelMyMovieMovie->rating = (string)$data->Rating;
				$modelMyMovieMovie->rating_votes = (string)$data->RatingVotes;
				
				//Poster
				$modelMyMovieMovie->poster_original = $this->getPoster($data->MovieData);
				
				if($saveImage)
				{
					$validator = new CUrlValidator();				
					
					if($modelMyMovieMovie->poster_original!='' && $validator->validateValue($modelMyMovieMovie->poster_original))
					{
						try {
							$content = @file_get_contents($modelMyMovieMovie->poster_original);
							if ($content !== false) {
								$file = fopen("images/".$modelMyMovieMovie->Id.".jpg", 'w');
								fwrite($file,$content);
								fclose($file);
								$modelMyMovieMovie->poster = $modelMyMovieMovie->Id.".jpg";
							} else {
								// an error happened
							}
						} catch (Exception $e) {
							throw $e;
							// an error happened
						}
					}
					else
					{
						$modelMyMovieMovie->poster = 'no_poster.jpg';
					}
					
					//Backdrop
					$modelMyMovieMovie->backdrop_original = $this->getBackdrop($data->MovieData);
					if($modelMyMovieMovie->backdrop_original!='' && $validator->validateValue($modelMyMovieMovie->backdrop_original))
					{
						try {
							$content = @file_get_contents($modelMyMovieMovie->backdrop_original);
							if ($content !== false) {
								$file = fopen("images/".$modelMyMovieMovie->Id."_bd.jpg", 'w');
								fwrite($file,$content);
								fclose($file);
								$modelMyMovieMovie->backdrop = $modelMyMovieMovie->Id."_bd.jpg";
							} else {
								// an error happened
							}
						} catch (Exception $e) {
							throw $e;
							// an error happened
						}
					}
				}
				//Obtengo la lista de los generos
				$modelMyMovieMovie->genre = implode(", ",$this->xmlToArray($data->Genres));
				
				//Obtengo la lista de los estudios
				$modelMyMovieMovie->studio =  implode(", ",$this->xmlToArray($data->Studios));
			}
		}
		return $modelMyMovieMovie;
	}
	
	function SearchDiscTitleByTitle($modelSearchDiscRequest)
	{
		$response = array();
		if(isset($modelSearchDiscRequest) && !empty($modelSearchDiscRequest->Title))
		{
			$model = new SearchDiscTitleByTitle();
			$model->Title = $modelSearchDiscRequest->Title;
			$model->Results = 10;
			$model->Strict = true;
			$model->IncludeEnglish = true;
			$model->IncludeAdult = true;
			$model->Country = isset($modelSearchDiscRequest->Country)?$modelSearchDiscRequest->Country:'';			
			$model->Locale = 0;
			
			$SearchDiscTitleByTitleResponse = $this->soapClient->SearchDiscTitleByTitle($model);
			
			if(isset($SearchDiscTitleByTitleResponse))
			{
				$response = $this->getTitlesResponse(simplexml_load_string($SearchDiscTitleByTitleResponse->SearchDiscTitleByTitleResult->any));
			}
		}
		return $response;
	}
	
	private function getTitlesResponse($data)
	{
		$titlesResponse = array();
		if(!empty($data) && (string)$data['status'] == 'ok')
		{
			$titles = $this->toArray($data->Titles);
			
			foreach($titles['Title'] as $title)
			{
				$model = new SearchDiscResponse();
				$model->setAttributes($this->toArray($title));
				$titlesResponse[] = $model;
			}
		}
		return $titlesResponse;
	}
	
	public function toArray(SimpleXMLElement $xml) {
		$array = (array)$xml;
	
		foreach ( array_slice($array, 0) as $key => $value ) {
			if ( $value instanceof SimpleXMLElement ) {
				$array[$key] = empty($value) ? NULL : $this->toArray($value);
			}
		}
		return $array;
	}
	
	private function xmlToArray($xml)
	{
		$xmlArr = array();
		$index = 0;
		foreach($xml->children() as $item)
		{
			$xmlArr[$index] = (string)$item;
			$index ++;
		}
		return $xmlArr;
	}

	private function getBackdrop($xml)
	{
		if(!empty($xml->Backdrops))
		{
			foreach($xml->Backdrops->children() as $item)
			{
				return (string)$item['File720P'];
			}
		
		}
		return "";
	}
	
	private function getParentalControlId($xml)
	{
		if(!empty($xml->ParentalRating))
		{
			$model = ParentalControl::model()->findByAttributes(array('value'=>$xml->ParentalRating->Value));
			
			if(isset($model))
			{
				return $model->Id;
			}
	
		}
		return 1;
	}
	
	private function getAdult($xml)
	{
		if(!empty($xml->ParentalRating))
		{
			if($xml->ParentalRating['Adult'] == 'True')
				return 1;
		}
		return 0;
	}
	
	private function getPoster($xml)
	{
		if(!empty($xml->Posters))
		{
			foreach($xml->Posters->children() as $item)
			{
				return (string)$item['File'];
			}
	
		}
		return "";
	}
}


