<?php
/**
* Soap client MyMoviesAPI
*
* Autogenerated with the Yii extension wsdl2php.
*/

class MyMovieBase
{
	public $UserName; //string;
	public $Password; //string;
	
	function __construct()
	{
		$this->UserName = "pablopedraza";
		$this->Password = "pablo";
	}	
}

class LoadMovieById extends MyMovieBase
{
	public $Handshake; //string;
	public $Reference; //string;
	public $TitleId; //string;
	public $PrimaryLanguage; //string;
	public $Client; //string;
	public $Version; //string;
	public $MaxTrailerBitrate; //int;
	public $Locale; //int;
}

class LoadMovieByIdResponse
{
	public $LoadMovieByIdResult; //LoadMovieByIdResult;
}

class LoadMovieByIdResult
{
	public $any; //string;
}

class SearchDiscTitleByTitle extends MyMovieBase
{
	public $Handshake; //string;
	public $Reference; //string;
	public $Title; //string;
	public $Country; //string;
	public $Type; //string;
	public $Results; //int;
	public $Strict; //boolean;
	public $IncludeEnglish; //boolean;
	public $IncludeAdult; //boolean;
	public $Locale; //int;
}

class SearchDiscTitleByTitleResponse
{
	public $SearchDiscTitleByTitleResult; //SearchDiscTitleByTitleResult;
}

class SearchDiscTitleByTitleResult
{
	public $any; //string;
}

class LoadDiscTitleById extends MyMovieBase
{
	public $Handshake; //string;
	public $Reference; //string;
	public $TitleId; //string;
	public $Client; //string;
	public $Version; //string;
	public $Locale; //int;
}
	
class LoadDiscTitleByIdResponse
{
	public $LoadDiscTitleByIdResult; //LoadDiscTitleByIdResult;
}
	
class LoadDiscTitleByIdResult
{
	public $any; //string;
}
	
	
	/**
	* The soap client proxy class
	*/
	class MyMoviesAPI 
	 {
		public $soapClient;
	
		private static $classmap = array(
			'LoadDiscTitleById'=>'LoadDiscTitleById',
			'LoadDiscTitleByIdResponse'=>'LoadDiscTitleByIdResponse',
			'LoadDiscTitleByIdResult'=>'LoadDiscTitleByIdResult',
	
	);
	
	function __construct($url='https://api.mymovies.dk/default.asmx?WSDL')
	{
		ini_set ('soap.wsdl_cache_enabled',0);
		$this->soapClient = new SoapClient($url,array("classmap"=>self::$classmap,"trace" => true,"exceptions" => false));
	}
	
	function LoadMovieById($titleId)
	{
		$movieResponse = null;
		if(!empty($titleId))
		{
			$model = new LoadMovieById();
			
			$model->TitleId = $titleId; //string;
			$model->MaxTrailerBitrate = 1; //int;
			$model->Locale = 0;
				
			$LoadMovieByIdResponse = $this->soapClient->LoadMovieById($model);
				
			if(isset($LoadMovieByIdResponse))
			{
				$movieResponse = $this->getMovieResponse(simplexml_load_string($LoadMovieByIdResponse->LoadMovieByIdResult->any));
			}
		}
		return $movieResponse;
	}
	
	private function getMovieResponse($data)
	{
		$modelMyMovie = null;
		if(!empty($data) && (string)$data['status'] == 'ok')
		{
			if(!empty($data->Title))
			{
				$data = $data->Title;
				$modelMyMovie = new MyMovie();
				
				$modelMyMovie->Id = (string)$data->ID;
				$modelMyMovie->type = (string)$data->Type;
				$modelMyMovie->bar_code = (string)$data->Barcode;
				$modelMyMovie->country = (string)$data->Country;
				$modelMyMovie->local_title = (string)$data->LocalTitle;
				$modelMyMovie->original_title = (string)$data->OriginalTitle;
				$modelMyMovie->sort_title = (string)$data->SortTitle;
				$modelMyMovie->aspect_ratio = (string)$data->AspectRatio;
				$modelMyMovie->video_standard = (string)$data->VideoStandard;
				$modelMyMovie->production_year = (string)$data->ProductionYear;
				$modelMyMovie->release_date = (string)$data->ReleaseDate;
				$modelMyMovie->running_time = (string)$data->RunningTime;
				$modelMyMovie->description = (string)$data->Description;
				$modelMyMovie->extra_features = (string)$data->ExtraFeatures;
				
				$modelMyMovie->parental_rating_desc = (!empty($data->ParentalRating)?(string)$data->ParentalRating->Description:"");
				
				$modelMyMovie->Id_parental_control = $this->getParentalControlId($data);
				
				$modelMyMovie->adult = $this->getAdult($data);
				
				$modelMyMovie->imdb = (string)$data->IMDB;
				$modelMyMovie->rating = (string)$data->Rating;
				$modelMyMovie->data_changed = (string)$data->DataChanged;
				$modelMyMovie->covers_changed = (string)$data->CoversChanged;
				
				//Obtengo la lista de los generos
				$modelMyMovie->genre = implode(", ",$this->xmlToArray($data->Genres));
				
				//Obtengo la lista de los estudios
				$modelMyMovie->studio =  implode(", ",$this->xmlToArray($data->Studios));
			}
		}
		return $modelMyMovie;
	}
	
	function SearchDiscTitleByTitle($modelSearchDiscRequest)
	{
		$response = array();
		if(isset($modelSearchDiscRequest) && !empty($modelSearchDiscRequest->Title))
		{
			$model = new SearchDiscTitleByTitle();
			$model->Title = $modelSearchDiscRequest->Title;
			$model->Results = 10;
			$model->Strict = true;
			$model->IncludeEnglish = true;
			$model->IncludeAdult = true;
			$model->Country = isset($modelSearchDiscRequest->Country)?$modelSearchDiscRequest->Country:'';			
			$model->Locale = 0;
			
			$SearchDiscTitleByTitleResponse = $this->soapClient->SearchDiscTitleByTitle($model);
			
			if(isset($SearchDiscTitleByTitleResponse))
			{
				$response = $this->getTitlesResponse(simplexml_load_string($SearchDiscTitleByTitleResponse->SearchDiscTitleByTitleResult->any));
			}
		}
		return $response;
	}
	
	private function getTitlesResponse($data)
	{
		$titlesResponse = array();
		if(!empty($data) && (string)$data['status'] == 'ok')
		{
			$titles = $this->toArray($data->Titles);
			
			foreach($titles['Title'] as $title)
			{
				$model = new SearchDiscResponse();
				$model->setAttributes($this->toArray($title));
				$titlesResponse[] = $model;
			}
		}
		return $titlesResponse;
	}
	
	public function toArray(SimpleXMLElement $xml) {
		$array = (array)$xml;
	
		foreach ( array_slice($array, 0) as $key => $value ) {
			if ( $value instanceof SimpleXMLElement ) {
				$array[$key] = empty($value) ? NULL : toArray($value);
			}
		}
		return $array;
	}
	function LoadDiscTitleById($myMovieId)
	{
		$model = new LoadDiscTitleById();
		$model->TitleId = $myMovieId;
		$model->Locale = 0;
		
		$LoadDiscTitleByIdResponse = $this->soapClient->LoadDiscTitleById($model);
		
		$idImdb = "";
		if(isset($LoadDiscTitleByIdResponse))
		{
			$idImdb = $this->saveMyMovie(simplexml_load_string($LoadDiscTitleByIdResponse->LoadDiscTitleByIdResult->any));
		}	
		 
		return $idImdb;
	}

	private function saveMyMovie($data)
	{
		$idImdb = "";
		if(!empty($data) && (string)$data['status'] == 'ok')
		{
			if(!empty($data->Title))
				$data = $data->Title;
			else
				return $idImdb;
			
			$modelMyMovieDB = MyMovie::model()->findByPk((string)$data->ID);
			
			if(!isset($modelMyMovieDB))
			{
				$modelMyMovie = new MyMovie();
				
				$modelMyMovie->Id = (string)$data->ID;
				$modelMyMovie->type = (string)$data->Type;
				$modelMyMovie->bar_code = (string)$data->Barcode;
				$modelMyMovie->country = (string)$data->Country;
				$modelMyMovie->local_title = (string)$data->LocalTitle;
				$modelMyMovie->original_title = (string)$data->OriginalTitle;
				$modelMyMovie->sort_title = (string)$data->SortTitle;
				$modelMyMovie->aspect_ratio = (string)$data->AspectRatio;
				$modelMyMovie->video_standard = (string)$data->VideoStandard;
				$modelMyMovie->production_year = (string)$data->ProductionYear;
				$modelMyMovie->release_date = (string)$data->ReleaseDate;
				$modelMyMovie->running_time = (string)$data->RunningTime;
				$modelMyMovie->description = (string)$data->Description;
				$modelMyMovie->extra_features = (string)$data->ExtraFeatures;
				
				$modelMyMovie->parental_rating_desc = (!empty($data->ParentalRating)?(string)$data->ParentalRating->Description:"");
				
				$modelMyMovie->Id_parental_control = $this->getParentalControlId($data);
				
				$modelMyMovie->adult = $this->getAdult($data);
				
				$modelMyMovie->imdb = (string)$data->IMDB;
				$modelMyMovie->rating = (string)$data->Rating;
				$modelMyMovie->data_changed = (string)$data->DataChanged;
				$modelMyMovie->covers_changed = (string)$data->CoversChanged;
				
				//Obtengo la lista de los generos
				$modelMyMovie->genre = implode(", ",$this->xmlToArray($data->Genres));
				
				//Obtengo la lista de los estudios
				$modelMyMovie->studio =  implode(", ",$this->xmlToArray($data->Studios));
		
				
				//Poster
				$modelMyMovie->poster_original = $this->getPoster($data->MovieData);
				
				$validator = new CUrlValidator();
				$setting = Setting::getInstance();
				
				if($modelMyMovie->poster_original!='' && $validator->validateValue($modelMyMovie->poster_original))
				{
					try {
						$content = @file_get_contents($modelMyMovie->poster_original);
						if ($content !== false) {
							$file = fopen($setting->path_images."/".$modelMyMovie->Id.".jpg", 'w');
							fwrite($file,$content);
							fclose($file);
							$modelMyMovie->poster = $modelMyMovie->Id.".jpg";
						} else {
							// an error happened
						}
					} catch (Exception $e) {
						throw $e;
						// an error happened
					}
				}
				else
				{
					$modelMyMovie->poster = 'no_poster.jpg';
				}
				
				//Backdrop
				$modelMyMovie->backdrop_original = $this->getBackdrop($data->MovieData);
				if($modelMyMovie->backdrop_original!='' && $validator->validateValue($modelMyMovie->backdrop_original))
				{
					try {
						$content = @file_get_contents($modelMyMovie->backdrop_original);
						if ($content !== false) {
							$file = fopen($setting->path_images."/".$modelMyMovie->Id."_bd.jpg", 'w');
							fwrite($file,$content);
							fclose($file);
							$modelMyMovie->backdrop = $modelMyMovie->Id."_bd.jpg";
						} else {
							// an error happened
						}
					} catch (Exception $e) {
						throw $e;
						// an error happened
					}
				}
				
				
				if($modelMyMovie->save())
				{
					$this->saveAudioTrack($data);
					$this->saveSubtitle($data);
				}
			}
			$idImdb = (string)$data->IMDB;
		}
		return $idImdb;
	}
	
	private function xmlToArray($xml)
	{
		$xmlArr = array();
		$index = 0;
		foreach($xml->children() as $item)
		{
			$xmlArr[$index] = (string)$item;
			$index ++;
		}
		return $xmlArr;
	}

	private function getBackdrop($xml)
	{
		if(!empty($xml->Backdrops))
		{
			foreach($xml->Backdrops->children() as $item)
			{
				return (string)$item['File720P'];
			}
		
		}
		return "";
	}
	
	private function getParentalControlId($xml)
	{
		if(!empty($xml->ParentalRating))
		{
			$model = ParentalControl::model()->findByAttributes(array('value'=>$xml->ParentalRating->Value));
			
			if(isset($model))
			{
				return $model->Id;
			}
	
		}
		return 1;
	}
	
	private function getAdult($xml)
	{
		if(!empty($xml->ParentalRating))
		{
			if($xml->ParentalRating['Adult'] == 'True')
				return 1;
		}
		return 0;
	}
	
	private function getPoster($xml)
	{
		if(!empty($xml->Posters))
		{
			foreach($xml->Posters->children() as $item)
			{
				return (string)$item['File'];
			}
	
		}
		return "";
	}
	
	private function saveAudioTrack($xml)
	{
		
		$idMyMovie = (string)$xml->ID;
		
		foreach($xml->AudioTracks->children() as $item)
		{
			$language = (string)$item['Language'];
			$type = (string)$item['Type'];
			$chanels = (string)$item['Channels'];
			
			$modelAudioTrackDB = AudioTrack::model()->findByAttributes(array(
													'language'=>$language,
													'type'=>$type,
													'chanel'=>$chanels,));
			
			$modelMyMovieAudioTrack = new MyMovieAudioTrack();
			$modelMyMovieAudioTrack->Id_my_movie = $idMyMovie;
			
			if(isset($modelAudioTrackDB))
			{
				$modelMyMovieAudioTrack->Id_audio_track = $modelAudioTrackDB->Id;
			}
			else
			{
				$modelAudioTrack = new AudioTrack();
				$modelAudioTrack->language = $language;
				$modelAudioTrack->type = $type;
				$modelAudioTrack->chanel = $chanels;
				$modelAudioTrack->save();
				
				$modelMyMovieAudioTrack->Id_audio_track = $modelAudioTrack->Id;
			}
			
			$model = MyMovieAudioTrack::model()->findByAttributes(array(
													'Id_my_movie'=>$idMyMovie, 
													'Id_audio_track'=>$modelMyMovieAudioTrack->Id_audio_track));
			if(!isset($model))
				$modelMyMovieAudioTrack->save();

		}
	}
	
	private function saveSubtitle($xml)
	{
	
		$idMyMovie = (string)$xml->ID;
	
		foreach($xml->Subtitles->children() as $item)
		{
			$language = (string)$item['Language'];
				
			$modelSubtitleDB = Subtitle::model()->findByAttributes(array(
														'language'=>$language,
														));
				
			$modelMyMovieSubtitle = new MyMovieSubtitle();
			$modelMyMovieSubtitle->Id_my_movie = $idMyMovie;
				
			if(isset($modelSubtitleDB))
			{
				$modelMyMovieSubtitle->Id_subtitle = $modelSubtitleDB->Id;
			}
			else
			{
				$modelSubtitle = new Subtitle();
				$modelSubtitle->language = $language;
				$modelSubtitle->save();
	
				$modelMyMovieSubtitle->Id_subtitle = $modelSubtitle->Id;
			}
				
			$model = MyMovieSubtitle::model()->findByAttributes(array(
														'Id_my_movie'=>$idMyMovie, 
														'Id_subtitle'=>$modelMyMovieSubtitle->Id_subtitle));
			if(!isset($model))
				$modelMyMovieSubtitle->save();
	
		}
	}
}


